// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.uj2016.dominio;

import es.uca.iw.uj2016.dominio.OfertaDeTrabajo;
import es.uca.iw.uj2016.dominio.OfertaDeTrabajoDataOnDemand;
import es.uca.iw.uj2016.dominio.OfertaTrabajoTitulos;
import es.uca.iw.uj2016.dominio.OfertaTrabajoTitulosDataOnDemand;
import es.uca.iw.uj2016.dominio.TitulosAcademicos;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OfertaTrabajoTitulosDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OfertaTrabajoTitulosDataOnDemand: @Component;
    
    private Random OfertaTrabajoTitulosDataOnDemand.rnd = new SecureRandom();
    
    private List<OfertaTrabajoTitulos> OfertaTrabajoTitulosDataOnDemand.data;
    
    @Autowired
    OfertaDeTrabajoDataOnDemand OfertaTrabajoTitulosDataOnDemand.ofertaDeTrabajoDataOnDemand;
    
    public OfertaTrabajoTitulos OfertaTrabajoTitulosDataOnDemand.getNewTransientOfertaTrabajoTitulos(int index) {
        OfertaTrabajoTitulos obj = new OfertaTrabajoTitulos();
        setIdOfertaDeTrabajo(obj, index);
        setIdTituloAcademico(obj, index);
        return obj;
    }
    
    public void OfertaTrabajoTitulosDataOnDemand.setIdOfertaDeTrabajo(OfertaTrabajoTitulos obj, int index) {
        OfertaDeTrabajo idOfertaDeTrabajo = ofertaDeTrabajoDataOnDemand.getRandomOfertaDeTrabajo();
        obj.setIdOfertaDeTrabajo(idOfertaDeTrabajo);
    }
    
    public void OfertaTrabajoTitulosDataOnDemand.setIdTituloAcademico(OfertaTrabajoTitulos obj, int index) {
        TitulosAcademicos idTituloAcademico = null;
        obj.setIdTituloAcademico(idTituloAcademico);
    }
    
    public OfertaTrabajoTitulos OfertaTrabajoTitulosDataOnDemand.getSpecificOfertaTrabajoTitulos(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        OfertaTrabajoTitulos obj = data.get(index);
        Integer id = obj.getId();
        return OfertaTrabajoTitulos.findOfertaTrabajoTitulos(id);
    }
    
    public OfertaTrabajoTitulos OfertaTrabajoTitulosDataOnDemand.getRandomOfertaTrabajoTitulos() {
        init();
        OfertaTrabajoTitulos obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return OfertaTrabajoTitulos.findOfertaTrabajoTitulos(id);
    }
    
    public boolean OfertaTrabajoTitulosDataOnDemand.modifyOfertaTrabajoTitulos(OfertaTrabajoTitulos obj) {
        return false;
    }
    
    public void OfertaTrabajoTitulosDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = OfertaTrabajoTitulos.findOfertaTrabajoTitulosEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'OfertaTrabajoTitulos' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<OfertaTrabajoTitulos>();
        for (int i = 0; i < 10; i++) {
            OfertaTrabajoTitulos obj = getNewTransientOfertaTrabajoTitulos(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
