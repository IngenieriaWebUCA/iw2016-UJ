// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.uj2016.web;

import es.uca.iw.uj2016.dominio.Demandante;
import es.uca.iw.uj2016.dominio.ExperienciaProfesional;
import es.uca.iw.uj2016.dominio.Inscripcion;
import es.uca.iw.uj2016.dominio.Perfil;
import es.uca.iw.uj2016.dominio.PuestoDeTrabajo;
import es.uca.iw.uj2016.dominio.Usuario;
import es.uca.iw.uj2016.web.ExperienciaProfesionalController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ExperienciaProfesionalController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ExperienciaProfesionalController.create(@Valid ExperienciaProfesional experienciaProfesional, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, experienciaProfesional);
            return "experienciaprofesionals/create";
        }
        uiModel.asMap().clear();
        experienciaProfesional.persist();
        return "redirect:/experienciaprofesionals/" + encodeUrlPathSegment(experienciaProfesional.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ExperienciaProfesionalController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ExperienciaProfesional());
        return "experienciaprofesionals/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ExperienciaProfesionalController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("experienciaprofesional", ExperienciaProfesional.findExperienciaProfesional(id));
        uiModel.addAttribute("itemId", id);
        return "experienciaprofesionals/show";
    }
    
        
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ExperienciaProfesionalController.update(@Valid ExperienciaProfesional experienciaProfesional, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, experienciaProfesional);
            return "experienciaprofesionals/update";
        }
        uiModel.asMap().clear();
        experienciaProfesional.merge();
        return "redirect:/experienciaprofesionals/" + encodeUrlPathSegment(experienciaProfesional.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ExperienciaProfesionalController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, ExperienciaProfesional.findExperienciaProfesional(id));
        return "experienciaprofesionals/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ExperienciaProfesionalController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ExperienciaProfesional experienciaProfesional = ExperienciaProfesional.findExperienciaProfesional(id);
        experienciaProfesional.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/experienciaprofesionals";
    }
    
    void ExperienciaProfesionalController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("experienciaProfesional_fechainicio_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("experienciaProfesional_fechafin_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
        
    String ExperienciaProfesionalController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
